Index: etc/webapi_rest/di.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/etc/webapi_rest/di.xml b/etc/webapi_rest/di.xml
--- a/etc/webapi_rest/di.xml
+++ b/etc/webapi_rest/di.xml	(date 1665735205046)
@@ -22,6 +25,9 @@
             </argument>
         </arguments>
     </type>
+    <type name="Magento\Webapi\Controller\Rest\ParamsOverrider">
+        <plugin name="validateCustomerData" type="Magento\Customer\Plugin\Webapi\Controller\Rest\ValidateCustomerData" sortOrder="1" disabled="false" />
+    </type>
     <type name="Magento\Customer\Api\CustomerRepositoryInterface">
       <plugin name="updateCustomerByIdFromRequest" type="Magento\Customer\Model\Plugin\UpdateCustomer" />
 </config>
Index: Plugin/Webapi/Controller/Rest/ValidateCustomerData.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Plugin/Webapi/Controller/Rest/ValidateCustomerData.php b/Plugin/Webapi/Controller/Rest/ValidateCustomerData.php
new file mode 100644
--- /dev/null	(date 1665735156812)
+++ b/Plugin/Webapi/Controller/Rest/ValidateCustomerData.php	(date 1665735156812)
@@ -0,0 +1,56 @@
+<?php
+/**
+ * Copyright Â© Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\Customer\Plugin\Webapi\Controller\Rest;
+
+use Magento\Webapi\Controller\Rest\ParamsOverrider;
+
+/**
+ * Validates Customer Data
+ */
+class ValidateCustomerData
+{
+    private const CUSTOMER_KEY = 'customer';
+
+    /**
+     * Before Overriding to validate data
+     *
+     * @param ParamsOverrider $subject
+     * @param array $inputData
+     * @param array $parameters
+     * @return array[]
+     *
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function beforeOverride(ParamsOverrider $subject, array $inputData, array $parameters): array
+    {
+        if (isset($inputData[self:: CUSTOMER_KEY])) {
+            $inputData[self:: CUSTOMER_KEY] = $this->validateInputData($inputData[self:: CUSTOMER_KEY]);
+        }
+        return [$inputData, $parameters];
+    }
+
+    /**
+     * Validates InputData
+     *
+     * @param array $inputData
+     * @return array
+     */
+    private function validateInputData(array $inputData): array
+    {
+        $result = [];
+
+        $data = array_filter($inputData, function ($k) use (&$result) {
+            $key = is_string($k) ? strtolower($k) : $k;
+            return !isset($result[$key]) && ($result[$key] = true);
+        }, ARRAY_FILTER_USE_KEY);
+
+        return array_map(function ($value) {
+            return is_array($value) ? $this->validateInputData($value) : $value;
+        }, $data);
+    }
+}
Index: Controller/Account/Confirm.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/Account/Confirm.php b/Controller/Account/Confirm.php
--- a/Controller/Account/Confirm.php
+++ b/Controller/Account/Confirm.php	(date 1665725792009)
@@ -152,7 +152,7 @@
             return $resultRedirect;
         }

-        $customerId = $this->getRequest()->getParam('id', false);
+        $customerId = $this->getCustomerId();
         $key = $this->getRequest()->getParam('key', false);
         if (empty($customerId) || empty($key)) {
             $this->messageManager->addErrorMessage(__('Bad request.'));
@@ -183,6 +183,16 @@
         return $resultRedirect->setUrl($this->_redirect->error($url));
     }

+    /**
+     * Returns customer id from request
+     *
+     * @return int
+     */
+    private function getCustomerId(): int
+    {
+        return (int)$this->getRequest()->getParam('id', 0);
+    }
+
     /**
      * Retrieve success message
      *
